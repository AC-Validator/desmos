(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{407:function(e,s,t){"use strict";t.r(s);var a=t(42),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"create-a-local-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-a-local-testnet"}},[e._v("#")]),e._v(" Create a local testnet")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Required desmos executables")]),e._v(" "),t("p",[e._v("You need to "),t("RouterLink",{attrs:{to:"/install.html"}},[e._v("install "),t("code",[e._v("desmoscli")]),e._v(" and "),t("code",[e._v("desmosd")])]),e._v(" before going further.")],1)]),e._v(" "),t("p",[e._v("There are two types of local testnets:")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"#creating-a-single-node-testnet"}},[e._v("Single node testnet")]),e._v(", which allows you to have a faster testnet with only one validator running on your machine.")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"#creating-a-multi-node-testnet"}},[e._v("Multi-node testnet")]),e._v(", which requires you to have "),t("a",{attrs:{href:"https://docker.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),t("OutboundLink")],1),e._v(" installed to run 4 validator nodes locally on your machine.")])])]),e._v(" "),t("h2",{attrs:{id:"creating-a-single-node-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-single-node-testnet"}},[e._v("#")]),e._v(" Creating a single node testnet")]),e._v(" "),t("p",[e._v("To create a single node local testnet, run the following commands:")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Create a "),t("code",[e._v("desmoscli")]),e._v(" key. Replace "),t("code",[e._v("<your-key-name>")]),e._v(" with whatever name you prefer.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("desmoscli keys "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your-key-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),t("p",[e._v("You will be required to input a password. Please make sure you use one that you will remember later. You should now see an output like")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ desmoscli keys "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" jack --dry-run\n\n- name: jack\n  type: "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v("\n  address: desmos1qdv08q76fmfwwzrxcqs78z6pzfxe88cgc5a3tk\n  pubkey: desmospub1addwnpepq2j9a35spphh6q529y2thg8tjw9l2c32hck98fnmu99sxpw9a9aegugm6xs\n  mnemonic: "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v("\n  threshold: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n  pubkeys: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n\n**Important** "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),e._v(" this mnemonic phrase "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" a safe place.\nIt is the only way to recover your account "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" you ever forget your password.\n\nglory discover erosion mention grow prosper supreme term nephew venue pear eternal budget rely outdoor lobster strong sign space "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" soccer medal tuition patrol\n")])])]),t("p",[e._v("Make sure you save the shown mnemonic phrase in some safe place as it might return useful in the future.")])]),e._v(" "),t("li",[t("p",[e._v("Initialize the testnet")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("desmosd init testnet --chain-id testnet\ndesmosd add-genesis-account "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your-key-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" 100000000000desmos\ndesmosd gentx --amount 1000000000desmos --name "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your-key-name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\ndesmosd collect-gentxs\n")])])]),t("p",[e._v("During the procedure you will be asked to input the same key password you have set inside point 1.")])]),e._v(" "),t("li",[t("p",[e._v("Start the testnet."),t("br"),e._v("\nOnce you have completed all the steps, you are ready to start your local testnet by running:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("desmosd start\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"creating-a-multi-node-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-multi-node-testnet"}},[e._v("#")]),e._v(" Creating a multi node testnet")]),e._v(" "),t("p",[e._v("To create a local multi node testnet, you can simply run the following command:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" localnet-start\n")])])]),t("p",[e._v("This command creates a 4-node network using the "),t("code",[e._v("desmoslabs/desmosdnode")]),e._v(" image.\nThe ports for each node are found in this table:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Node ID")]),e._v(" "),t("th",[e._v("P2P Port")]),e._v(" "),t("th",[e._v("RPC Port")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("desmosdnode0")])]),e._v(" "),t("td",[t("code",[e._v("26656")])]),e._v(" "),t("td",[t("code",[e._v("26657")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("desmosdnode1")])]),e._v(" "),t("td",[t("code",[e._v("26659")])]),e._v(" "),t("td",[t("code",[e._v("26660")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("desmosdnode2")])]),e._v(" "),t("td",[t("code",[e._v("26661")])]),e._v(" "),t("td",[t("code",[e._v("26662")])])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("desmosdnode3")])]),e._v(" "),t("td",[t("code",[e._v("26663")])]),e._v(" "),t("td",[t("code",[e._v("26664")])])])])]),e._v(" "),t("p",[e._v("To update the binary, just rebuild it and restart the nodes:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("make build-linux localnet-start\n")])])]),t("h4",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("make localnet-start")]),e._v(" creates files for a 4-node testnet in "),t("code",[e._v("./build")]),e._v(" by\ncalling the "),t("code",[e._v("desmosd testnet")]),e._v(" command. This outputs a handful of files in the\n"),t("code",[e._v("./build")]),e._v(" directory:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ tree -L "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" build/\nbuild/\n├── desmoscli\n├── desmosd\n├── gentxs\n│   ├── node0.json\n│   ├── node1.json\n│   ├── node2.json\n│   └── node3.json\n├── node0\n│   ├── desmoscli\n│   │   ├── key_seed.json\n│   │   └── keys\n│   └── desmosd\n│       ├── "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("desmosd.log}")]),e._v("\n│       ├── config\n│       └── data\n├── node1\n│   ├── desmoscli\n│   │   └── key_seed.json\n│   └── desmosd\n│       ├── "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("desmosd.log}")]),e._v("\n│       ├── config\n│       └── data\n├── node2\n│   ├── desmoscli\n│   │   └── key_seed.json\n│   └── desmosd\n│       ├── "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("desmosd.log}")]),e._v("\n│       ├── config\n│       └── data\n└── node3\n    ├── desmoscli\n    │   └── key_seed.json\n    └── desmosd\n        ├── "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${LOG"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":-")]),e._v("desmosd.log}")]),e._v("\n        ├── config\n        └── data\n")])])]),t("p",[e._v("Each "),t("code",[e._v("./build/nodeN")]),e._v(" directory is mounted to the "),t("code",[e._v("/desmosd")]),e._v(" directory in each container.")]),e._v(" "),t("h4",{attrs:{id:"logging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" Logging")]),e._v(" "),t("p",[e._v("Logs are saved under each "),t("code",[e._v("./build/nodeN/desmosd/desmos.log")]),e._v(". You can also watch logs\ndirectly via Docker, for example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker logs -f desmosdnode0\n")])])]),t("h4",{attrs:{id:"keys-accounts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keys-accounts"}},[e._v("#")]),e._v(" Keys & Accounts")]),e._v(" "),t("p",[e._v("To interact with "),t("code",[e._v("desmoscli")]),e._v(" and start querying state or creating txs, you use the\n"),t("code",[e._v("desmoscli")]),e._v(" directory of any given node as your "),t("code",[e._v("home")]),e._v(", for example:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("desmoscli keys list --home ./build/node0/desmoscli\n")])])]),t("p",[e._v("Now that accounts exists, you may create new accounts and send those accounts\nfunds!")]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v(": Each node's seed is located at "),t("code",[e._v("./build/nodeN/desmoscli/key_seed.json")]),e._v(" and can be restored to the CLI using the "),t("code",[e._v("desmoscli keys add --restore")]),e._v(" command")])])}),[],!1,null,null,null);s.default=n.exports}}]);