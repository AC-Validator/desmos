(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{430:function(e,t,s){"use strict";s.r(t);var a=s(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"upgrade-manager-setup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-manager-setup"}},[e._v("#")]),e._v(" Upgrade manager setup")]),e._v(" "),s("p",[e._v("The following guide allows you to setup your Desmos node along with the "),s("a",{attrs:{href:"https://github.com/regen-network/cosmosd",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("cosmosd")]),s("OutboundLink")],1),e._v(" binary to ensure that each time a new on-chain upgrade is required, it is handled properly.")]),e._v(" "),s("h2",{attrs:{id:"_1-setup-desmosd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-setup-desmosd"}},[e._v("#")]),e._v(" 1. Setup "),s("code",[e._v("desmosd")])]),e._v(" "),s("p",[e._v("If you haven't already, please setup the "),s("code",[e._v("desmosd")]),e._v(" binary and your validator node. You can do so by following these guides:")]),e._v(" "),s("ol",[s("li",[s("RouterLink",{attrs:{to:"/fullnode/setup/overview.html"}},[e._v("Setup a full node")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/validators/setup.html"}},[e._v("Setup a validator node")])],1)]),e._v(" "),s("h2",{attrs:{id:"_2-setup-cosmosd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-setup-cosmosd"}},[e._v("#")]),e._v(" 2. Setup "),s("code",[e._v("cosmosd")])]),e._v(" "),s("h3",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),s("p",[e._v("In order to setup properly "),s("code",[e._v("cosmosd")]),e._v(" you are required to have Go 1.14+ installed on your machine. To make sure you have it, you can execute the following command, checking that the output matches the one provided:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ go version\ngo version go1.14.5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("os/build"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("p",[e._v("Also, make sure you have "),s("code",[e._v("git")]),e._v(" installed as well:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" version\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" version "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.25")]),e._v(".1\n")])])]),s("p",[e._v("Now, we can start the installation process:")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Create a folder for the "),s("code",[e._v("cosmosd")]),e._v(" source files:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" ~/cosmosd\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Clone the "),s("code",[e._v("cosmosd")]),e._v(" sources inside that folder:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" ~/cosmosd \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone git@github.com:regen-network/cosmosd.git "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" \n")])])])]),e._v(" "),s("li",[s("p",[e._v("Build the "),s("code",[e._v("cosmosd")]),e._v(" binary and install it inside "),s("code",[e._v("$GOBIN")]),e._v(" to make it accessible everywhere:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("build -o "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$GOBIN")]),e._v("/cosmosd\n")])])])])]),e._v(" "),s("p",[e._v("Now, you should be able to execute "),s("code",[e._v("cosmosd")]),e._v(" from everywhere. If everything has been done correctly, this should be the output:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ cosmosd\nDAEMON_NAME is not "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v("\n")])])]),s("h3",{attrs:{id:"environment-setup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#environment-setup"}},[e._v("#")]),e._v(" Environment setup")]),e._v(" "),s("p",[e._v("Now, we need to properly setup the environmental variables for "),s("code",[e._v("cosmosd")]),e._v(". To do so, run:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'export DAEMON_NAME=desmosd'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'export DAEMON_HOME="),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.desmosd'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'export DAEMON_RESTART_AFTER_UPGRADE=on'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" 'export "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DAEMON_ALLOW_DOWNLOAD_BINARIES")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("on  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ~/.profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" ~/.profile\n")])])]),s("p",[e._v("This will load the environmental variables into the "),s("code",[e._v("~/.profile")]),e._v(" file and then refresh the current terminal instance.")]),e._v(" "),s("p",[e._v("If you want to know more about the set variables, here is a brief description:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[e._v("Variable")]),e._v(" "),s("th",{staticStyle:{"text-align":"left"}},[e._v("Description")])])]),e._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("DAEMON_HOME")])]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("Location where upgrade binaries should be kept")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("DAEMON_NAME")])]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("Name of the binary itself")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("DAEMON_RESTART_AFTER_UPGRADE")])]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("(optional) if set to on it will restart a sub-process with the same args (but new binary) after a successful upgrade. By default, the manager dies afterwards and allows the supervisor to restart it if needed. Note that this will not auto-restart the child if there was an error.")])]),e._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[e._v("DAEMON_ALLOW_DOWNLOAD_BINARIES")])]),e._v(" "),s("td",{staticStyle:{"text-align":"left"}},[e._v("(optional) if set to "),s("code",[e._v("on")]),e._v(" will enable auto-downloading of new binaries")])])])]),e._v(" "),s("h3",{attrs:{id:"folders-setup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#folders-setup"}},[e._v("#")]),e._v(" Folders setup")]),e._v(" "),s("p",[e._v("In order to work properly, the upgrade manager inside "),s("code",[e._v("cosmosd")]),e._v(" needs to have a specific folder structure in place:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- genesis\n  - bin\n    - desmosd\n- upgrades\n  - <name>\n    - bin\n      - desmosd\n")])])]),s("p",[e._v("In order to create it, please execute the following commands:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p ~/.desmosd/upgrade_manager/genesis/bin\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p ~/.desmosd/upgrade_manager/upgrades\n")])])]),s("p",[e._v("Now we need to copy the current "),s("code",[e._v("desmosd")]),e._v(" binary into the "),s("code",[e._v("genesis/bin")]),e._v(" folder to ensure that "),s("code",[e._v("cosmosd")]),e._v(" can start the chain properly:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$GOBIN")]),e._v("/desmosd ~/.desmosd/upgrade_manager/genesis/bin\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);