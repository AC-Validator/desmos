(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{403:function(e,s,t){"use strict";t.r(s);var a=t(42),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"manual-full-node-setup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manual-full-node-setup"}},[e._v("#")]),e._v(" Manual full node setup")]),e._v(" "),t("p",[e._v("Following you will find the instructions on how to manually setup your Desmos full node.")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Requirements")]),e._v(" "),t("p",[e._v("Before starting, make sure you read the "),t("RouterLink",{attrs:{to:"/fullnode/setup/overview.html"}},[e._v("setup overview")]),e._v(" to make sure your hardware meets the needed requirements.")],1)]),e._v(" "),t("h2",{attrs:{id:"_1-build-the-software"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-build-the-software"}},[e._v("#")]),e._v(" 1. Build the software")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Choose your DB backend")]),e._v(" "),t("p",[e._v("Before installing the software, a consideration must be done.")]),e._v(" "),t("p",[e._v("By default, Desmos uses "),t("a",{attrs:{href:"https://github.com/google/leveldb",target:"_blank",rel:"noopener noreferrer"}},[e._v("LevelDB"),t("OutboundLink")],1),e._v(" as its database backend engine. However, since version "),t("code",[e._v("v0.6.0")]),e._v(" we've also added the possibility of optionally using "),t("a",{attrs:{href:"https://github.com/facebook/rocksdb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Facebook's RocksDB"),t("OutboundLink")],1),e._v(", which, although still being experimental, is know to be faster and could lead to lower syncing times. If you want to try out RocksDB (which we suggest you to do) you can take a look at our "),t("RouterLink",{attrs:{to:"/fullnode/rocksdb-installation.html"}},[e._v("RocksDB installation guide")]),e._v(" before proceeding further.")],1)]),e._v(" "),t("p",[e._v("The following operations will all be done in the terminal environment under your home directory.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Clone the Desmos software")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/desmos-labs/desmos.git "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" desmos\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you do not have git installed, you can install it by running")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sudo apt install git-all --yes")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Checkout the correct commit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Please check on https://github.com/desmos-labs/morpheus to get the proper ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the tag to use based on the current network version")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout tags/"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("version"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Build the software")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you want to use the default database backend run ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you want to use RocksDB run instead")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("DB_BACKEND")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("rocksdb \n")])])]),t("p",[e._v("If the software is built successfully, "),t("code",[e._v("desmosd")]),e._v(" and "),t("code",[e._v("desmoscli")]),e._v(" will be located at "),t("code",[e._v("/go/bin")]),e._v(" of your home directory. If you have setup your environment variables correctly in the previous step, you should be able to access them correctly. Try to check the version of the software.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("desmosd version --long\n")])])]),t("h2",{attrs:{id:"_2-initialize-the-desmos-working-directory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-initialize-the-desmos-working-directory"}},[e._v("#")]),e._v(" 2. Initialize the Desmos working directory")]),e._v(" "),t("p",[e._v("Configuration files and chain data will be stored inside the "),t("code",[e._v(".desmosd")]),e._v(" directory under your home directory by default. It will be created when you initialize the environment.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Initialize the working envinorment for Desmos")]),e._v("\ndesmosd init "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your_moniker"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),t("p",[e._v("You can choose any moniker your like. It will be saved in the "),t("code",[e._v("config.toml")]),e._v(" under the "),t("code",[e._v(".desmosd")]),e._v(" working directory.")]),e._v(" "),t("h2",{attrs:{id:"_3-get-the-genesis-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-get-the-genesis-file"}},[e._v("#")]),e._v(" 3. Get the genesis file")]),e._v(" "),t("p",[e._v("To connect to or start a new network, a genesis file is required. The file contains all the settings telling how the genesis block of the network should look like. To connect to the "),t("code",[e._v("morpheus")]),e._v(" testnets, you will need the corresponding genesis file of each testnet. Visit the "),t("a",{attrs:{href:"https://github.com/desmos-labs/morpheus",target:"_blank",rel:"noopener noreferrer"}},[e._v("testnet repo"),t("OutboundLink")],1),e._v(" and download the correct genesis file by running the following command.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# First, remove the newly created genesis file during the initialization")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.desmosd/config/genesis.json\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Download the existing genesis file for the testnet")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Assuming you are getting the genesis file for the latest testnet")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://raw.githubusercontent.com/desmos-labs/morpheus/master/genesis.json -o "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.desmosd/config/genesis.json\n")])])]),t("h2",{attrs:{id:"_4-connect-to-seed-nodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-connect-to-seed-nodes"}},[e._v("#")]),e._v(" 4. Connect to seed nodes")]),e._v(" "),t("p",[e._v("To properly run your node, you will need to connect it to other full nodes running with the same software and genesis file. This can be done configuring the "),t("code",[e._v("seeds")]),e._v(" value inside the "),t("code",[e._v("config.toml")]),e._v(" file localed under the "),t("code",[e._v(".desmosd")]),e._v(" working directory.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Open the config.toml file using text editor")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.desmosd/config/config.toml\n")])])]),t("p",[e._v("Locate the "),t("code",[e._v('seeds = ""')]),e._v(" text at line 164. Update its value to a node address of a seed node. The format of a node address must be "),t("code",[e._v("<node_id>@<node_ip_address>:<port>")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example")]),e._v("\nseeds "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cd4612957461881d5f62367c589aaa0fdf933bd8@seed-1.morpheus.desmos.network:26656,fc4714d15629e3b016847c45d5648230a30a50f1@seed-2.morpheus.desmos.network:26656"')]),e._v("\n")])])]),t("p",[e._v("Save the file and exit the text editor.")]),e._v(" "),t("h2",{attrs:{id:"optional-change-your-database-backend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optional-change-your-database-backend"}},[e._v("#")]),e._v(" (Optional) Change your database backend")]),e._v(" "),t("p",[e._v("If you would like to run your node using "),t("a",{attrs:{href:"https://github.com/facebook/rocksdb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Facebook's RocksDB"),t("OutboundLink")],1),e._v(" as the database backend, and you have correctly built the Desmos binaries to work with it following the instructions at "),t("a",{attrs:{href:"#1-build-the-software"}},[e._v("point 1")]),e._v(", there is one more thing you need to do.")]),e._v(" "),t("p",[e._v("In order to tell Tendermint to use RocksDB as its database backend engine, you are required to change the following like inside the "),t("code",[e._v("config.toml")]),e._v(" file:")]),e._v(" "),t("div",{staticClass:"language-toml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-toml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key property"}},[e._v("db_backend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"goleveldb"')]),e._v("\n")])])]),t("p",[e._v("To become")]),e._v(" "),t("div",{staticClass:"language-toml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-toml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key property"}},[e._v("db_backend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rocksdb"')]),e._v("\n")])])]),t("p",[e._v("Once you have done so, you can go ahead with "),t("a",{attrs:{href:"#5-start-the-desmos-node"}},[e._v("point 5")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"_5-start-the-desmos-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-start-the-desmos-node"}},[e._v("#")]),e._v(" 5. Start the Desmos node")]),e._v(" "),t("p",[e._v("Now you are good to run the full node. To do so, run:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run Desmos full node")]),e._v("\ndesmosd start\n")])])]),t("p",[e._v("The full node will connect to the peers and start syncing. You can check the status of the node by executing:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Check status of the node")]),e._v("\ndesmoscli status\n")])])]),t("p",[e._v("You should see an output like the following one:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "node_info": {\n    "protocol_version": {\n      "p2p": "7",\n      "block": "10",\n      "app": "0"\n    },\n    "id": "8307c16191e249d6d3871ce764262d40d9cf249f",\n    "listen_addr": "tcp://0.0.0.0:26656",\n    "network": "morpheus-1001",\n    "version": "0.32.7",\n    "channels": "4020212223303800",\n    "moniker": "Morpheus",\n    "other": {\n      "tx_index": "on",\n      "rpc_address": "tcp://0.0.0.0:26657"\n    }\n  },\n  "sync_info": {\n    "latest_block_hash": "AAB066E5B020C325E5AE41CFACFB95DAC83B261D0C4A24439A66A2977A03B7EC",\n    "latest_app_hash": "5B4CE89D3C1EFA1AE8E16710103EEAE1FDF9D13BE44F5847F5376810E8F39DAE",\n    "latest_block_height": "480950",\n    "latest_block_time": "2020-01-13T06:35:29.237599298Z",\n    "catching_up": false\n  },\n  "validator_info": {\n    "address": "25AD49347EC88C1922F18B317D12EA59DB0EC8D6",\n    "pub_key": {\n      "type": "tendermint/PubKeyEd25519",\n      "value": "WPZGfRMuyd8X4B4vAx79yfyqH+nmEboaML8YlJKT/uE="\n    },\n    "voting_power": "0"\n  }\n}\n')])])]),t("p",[e._v("If you see that the "),t("code",[e._v("catching_up")]),e._v(" value is "),t("code",[e._v("false")]),e._v(" under the "),t("code",[e._v("sync_info")]),e._v(", it means that you are fully synced. If it is "),t("code",[e._v("true")]),e._v(", it means your node is still syncing.")]),e._v(" "),t("p",[e._v("After your node is fully synced, you can consider running your full node as a "),t("RouterLink",{attrs:{to:"/validators/setup.html"}},[e._v("validator node")]),e._v(".")],1),e._v(" "),t("h2",{attrs:{id:"optional-configure-the-service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optional-configure-the-service"}},[e._v("#")]),e._v(" (Optional) Configure the service")]),e._v(" "),t("p",[e._v("To allow your "),t("code",[e._v("desmosd")]),e._v(" instance to run in the background as a service you need to execute the following command")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/systemd/system/desmosd.service "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /dev/null "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF  \n[Unit]\nDescription=Desmosd Full Node\nAfter=network-online.target\n\n[Service]\nUser=ubuntu\nExecStart=/home/ubuntu/go/bin/desmosd start\nRestart=always\nRestartSec=3\nLimitNOFILE=4096 # To compensate the "Too many open files" issue.\n\n[Install]\nWantedBy=multi-user.target\nEOF')]),e._v("\n")])])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("If you are logged as a user which is not "),t("code",[e._v("ubuntu")]),e._v(", make sure to edit the "),t("code",[e._v("User")]),e._v(" and "),t("code",[e._v("ExecStart")]),e._v(" values accordingly")])]),e._v(" "),t("p",[e._v("Once you have successfully created the service, you need to first enable it. You can do so by running")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("systemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" desmosd\n")])])]),t("p",[e._v("After this, you can run it by executing")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("systemctl start desmosd\n")])])]),t("h3",{attrs:{id:"service-operations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-operations"}},[e._v("#")]),e._v(" Service operations")]),e._v(" "),t("h4",{attrs:{id:"check-the-service-status"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check-the-service-status"}},[e._v("#")]),e._v(" Check the service status")]),e._v(" "),t("p",[e._v("If you want to see if the service is running properly, you can execute")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("systemctl status desmosd\n")])])]),t("p",[e._v("If everything is running smoothly you should see something like")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ systemctl status desmosd\n● desmosd.service - Desmosd Node\n   Loaded: loaded "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("/etc/systemd/system/desmosd.service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" enabled"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" vendor preset: \n   Active: active "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("running"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" since Fri "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("-01-17 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(":23:12 CET"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" 2min 3s ago\n Main PID: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11318")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("desmosd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    Tasks: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("limit: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4419")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n   CGroup: /system.slice/desmosd.service\n           └─11318 /root/go/bin/desmosd start\n")])])]),t("h4",{attrs:{id:"check-the-node-status"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check-the-node-status"}},[e._v("#")]),e._v(" Check the node status")]),e._v(" "),t("p",[e._v("If you want to see the current status of the node, you can do so by running")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tail")]),e._v(" -100f /var/log/syslog\n")])])]),t("p",[e._v("This should return something like")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Jan 17 09:24:55 <your-moniker> desmosd[11318]: I[2020-01-17|10:24:55.212] Executed block                               module=state height=10183 validTxs=0 invalidTxs=0\nJan 17 09:24:55 <your-moniker> desmosd[11318]: I[2020-01-17|10:24:55.237] Committed state                              module=state height=10183 txs=0 appHash=0D8BEBCAC81A7B8DA1FBBF93FA6E921E7815AE3EBF53B78DB66CD8437DFD70C8\nJan 17 09:24:55 <your-moniker> desmosd[11318]: I[2020-01-17|10:24:55.252] Executed block                               module=state height=10184 validTxs=0 invalidTxs=0\nJan 17 09:24:55 <your-moniker> desmosd[11318]: I[2020-01-17|10:24:55.261] Committed state                              module=state height=10184 txs=0 appHash=459F68E6C5BF31EA5E58FB959829A587BB09B9F4DCA9C31CB754E5F26125FCD5\n")])])]),t("h4",{attrs:{id:"stopping-the-service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stopping-the-service"}},[e._v("#")]),e._v(" Stopping the service")]),e._v(" "),t("p",[e._v("If you wish to stop the service from running, you can do so by running")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("systemctl stop desmosd\n")])])]),t("p",[e._v("To check the successful stop, execute "),t("code",[e._v("systemctl status desmosd")]),e._v(". This should return")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ systemctl status desmosd\n● desmosd.service - Desmosd Node\n   Loaded: loaded "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("/etc/systemd/system/desmosd.service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" enabled"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" vendor preset: enabled"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n   Active: failed "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Result: exit-code"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" since Fri "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),e._v("-01-17 "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(":28:04 CET"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" 3s ago\n  Process: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11318")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecStart")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/root/go/bin/desmosd start "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("code"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("exited, "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("status")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("143")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n Main PID: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("11318")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("code"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("exited, "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("status")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("143")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);